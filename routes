auth.js
--------
const express = require('express');
const router = express.Router();
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const auth = require('../middleware/auth.js');
const User = require('../models/User.js');
const RefreshToken = requir('../models/Refreshtoken.js');

// POST /api/auth/register
router.post('/register', async (req, res) => {
  const { name, email, password } = req.body;
  try {
    let user = await User.findOne({ email });
    if (user) return res.status(400).json({ msg: 'User  already exists' });
    user = new User({ name, email, password: await bcrypt.hash(password, 10) });
    await user.save();

    const payload = { id: user._id };
    const accessToken = jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: '7d' });
    const refreshTokenStr = jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: '7d' });

    const refreshToken = new RefreshToken({
      token: refreshTokenStr,
      user: user._id,
      expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)
    });
    await refreshToken.save();

    res.json({
      token: accessToken,
      refreshToken: refreshTokenStr,
      user: { id: user._id, name: user.name, email: user.email }
    });
  } catch (err) {
    console.error(err);
    res.status(500).send('Server error');
  }
});

// POST /api/auth/login
router.post('/login', async (req, res) => {
  const { email, password } = req.body;
  try {
    const user = await User.findOne({ email });
    if (!user) return res.status(400).json({ msg: 'Invalid credentials' });
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(400).json({ msg: 'Invalid credentials' });

    const payload = { id: user._id };
    const accessToken = jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: '7d' });
    const refreshTokenStr = jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: '7d' });

    await RefreshToken.deleteMany({ user: user._id });

    const refreshToken = new RefreshToken({
      token: refreshTokenStr,
      user: user._id,
      expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)
    });
    await refreshToken.save();

    res.json({
      token: accessToken,
      refreshToken: refreshTokenStr,
      user: { id: user._id, name: user.name, email: user.email }
    });
  } catch (err) {
    console.error(err);
    res.status(500).send('Server error');
  }
});

// POST /api/auth/refresh
router.post('/refresh', async (req, res) => {
  const { refreshToken: token } = req.body;
  if (!token) return res.status(401).json({ msg: 'No refresh token' });

  try {
    const rt = await RefreshToken.findOne({ token });
    if (!rt || rt.expiresAt < new Date()) {
      return res.status(401).json({ msg: 'Invalid refresh token' });
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const user = await User.findById(decoded.id);
    if (!user) return res.status(401).json({ msg: 'User  not found' });

    await RefreshToken.deleteOne({ token });

    const payload = { id: user._id };
    const newAccessToken = jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: '7d' });
    const newRefreshTokenStr = jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: '7d' });

    const newRt = new RefreshToken({
      token: newRefreshTokenStr,
      user: user._id,
      expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)
    });
    await newRt.save();

    res.json({ token: newAccessToken, refreshToken: newRefreshTokenStr });
  } catch (err) {
    res.status(401).json({ msg: 'Token is not valid' });
  }
});

// GET /api/auth/me
router.get('/me', auth, async (req, res) => {
  try {
    const user = await User.findById(req.user.id).select('-password');
    res.json(user);
  } catch (err) {
    console.error(err);
    res.status(500).send('Server error');
  }
});



Search.js
-----------
import express from "express";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import User from "../models/User.js";

const router = express.Router();

router.post("/register", async (req, res) => {
  const { name, email, password } = req.body;
  try {
    let user = await User.findOne({ email });
    if (user) return res.status(400).json({ msg: "User already exists" });
    user = new User({ name, email, password: await bcrypt.hash(password, 10) });
    await user.save();
    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: "7d" });
    res.json({ token, user: { id: user._id, name: user.name, email: user.email } });
  } catch (err) {
    console.error(err);
    res.status(500).send("Server error");
  }
});

router.post("/login", async (req, res) => {
  const { email, password } = req.body;
  try {
    const user = await User.findOne({ email });
    if (!user) return res.status(400).json({ msg: "Invalid credentials" });
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(400).json({ msg: "Invalid credentials" });
    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: "7d" });
    res.json({ token, user: { id: user._id, name: user.name, email: user.email } });
  } catch (err) {
    console.error(err);
    res.status(500).send("Server error");
  }
});

export default router;



track.js
---------
const express = require('express');
const router = express.Router();
const multer = require('multer');
const auth = require('../middleware/auth');
const Track = require('../models/Track');

const upload = multer({ dest: 'uploads/' });

// GET /api/tracks
router.get('/', async (req, res) => {
  try {
    const tracks = await Track.find().populate('uploadedBy', 'name');
    res.json(tracks);
  } catch (err) {
    console.error(err);
    res.status(500).send('Server error');
  }
});

// POST /api/tracks/upload
router.post('/upload', auth, upload.single('file'), async (req, res) => {
  try {
    if (!req.file) return res.status(400).json({ msg: 'No file uploaded' });

    const { title, artist } = req.body;
    const track = new Track({
      title,
      artist: artist || 'Unknown',
      filename: req.file.filename,
      originalname: req.file.originalname,
      uploadedBy: req.user.id
    });
    await track.save();
    res.json(track);
  } catch (err) {
    console.error(err);
    res.status(500).send('Server error');
  }
});

module.exports = router;

module.exports = router;
